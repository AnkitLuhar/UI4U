import React, { useEffect, useState } from "react";
import { RetroGrid } from "./RetroGrid";
import "./RetroGrid.css";
import logo from "../logo/UI4U.png";
import { TbPrompt } from "react-icons/tb";
import { useLocation } from "react-router-dom";

const Ui = () => {
  const location = useLocation();
  const userPrompt = location.state?.userPrompt || "Please Insert a Prompt...";

  // State to manage the active view (preview or code)
  const [isPreview, setIsPreview] = useState(true);
  const [generatedCode, setGeneratedCode] = useState(""); // State for generated code
  const [isLoading, setIsLoading] = useState(false); // State for loading status
  const [error, setError] = useState(null); // State for error handling
  const [generatedHTML, setGeneratedHTML] = useState("");
  const [generatedCSS, setGeneratedCSS] = useState("");
  const [generatedJS, setGeneratedJS] = useState("");
  const [innerCSS, setInnerCSS] = useState(""); // State for inner CSS
  const [innerJS, setInnerJS] = useState(""); // State for inner JS

  const generateUI = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch("http://localhost:8000/generate-ui", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt: userPrompt }),
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      console.log(response);
      const data = await response.json();
      const code = data.code; // Extract the code from the backend response
      setGeneratedCode(code);

      // Extracting HTML, CSS, and JS from the response
      const htmlMatch = code.match(
        /## HTML \(index\.html\)([\s\S]*?)## CSS \(style\.css\)/
      );
      const cssMatch = code.match(
        /## CSS \(style\.css\)([\s\S]*?)## JavaScript \(script\.js\)/
      );
      const jsMatch = code.match(/## JavaScript \(script\.js\)([\s\S]*)/);

      const htmlCode = htmlMatch
        ? htmlMatch[1].trim()
        : "<!-- HTML is not Present -->";
      const cssCode = cssMatch
        ? cssMatch[1].trim()
        : "<!-- CSS is not Present -->";
      const jsCode = jsMatch ? jsMatch[1].trim() : "<!-- JS is not Present -->";

      setGeneratedHTML(htmlCode);
      setGeneratedCSS(cssCode);
      setGeneratedJS(jsCode);

      console.log({ htmlCode, cssCode, jsCode });
    } catch (error) {
      setError("Error fetching data from server");
      console.error("Error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // useEffect(() => {
  //   generateUI();
  // }, [userPrompt]);

  const copyToClipboard = (code) => {
    navigator.clipboard.writeText(code).then(() => {
      alert("Code copied to clipboard!");
    });
  };
  return (
    <div className="h-screen flex flex-col bg-black">
      {/* Logo at the top-left corner */}
      <img
        src={logo}
        alt="logo"
        className="absolute top-2 left-2 w-32 h-auto"
      />

      {/* User prompt centered */}
      <div className="flex items-center justify-center flex-grow">
        <div className="flex items-center">
          <TbPrompt className="text-white text-xl w-10" />
          <h1 className="text-white pl-4 text-2xl font-bold">{userPrompt}</h1>
        </div>
      </div>

      {/* Box to toggle between code and preview */}
      <div className="w-[65%] bg-[#1E1E1E] mx-auto rounded-lg shadow-xl p-4 relative">
        {/* Buttons to toggle between Preview and Code */}
        <div className="flex mb-4">
          <button
            className={`py-2 px-4 rounded-lg transition-all duration-300 ${
              isPreview
                ? "bg-[#ff2975] text-white shadow-lg"
                : "bg-gray-700 text-white"
            }`}
            onClick={() => setIsPreview(true)}
          >
            Preview
          </button>
          <button
            className={`py-2 px-4 rounded-lg transition-all duration-300 ml-2 ${
              !isPreview
                ? "bg-[#ff2975] text-white shadow-lg"
                : "bg-gray-700 text-white"
            }`}
            onClick={() => setIsPreview(false)}
          >
            Code
          </button>
        </div>

        {/* Container for Code and Preview */}
        <div className="h-[300px] p-4 border border-gray-600 rounded-lg overflow-hidden">
          {isPreview ? (
            <div className="text-white text-lg h-full overflow-auto">
              <div
                dangerouslySetInnerHTML={{
                  __html: generatedHTML,
                }}
              />
              {innerCSS && <style>{innerCSS}</style>}
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-4">
              {/* HTML Section */}
              <div className="bg-gray-800 p-4 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <h2 className="text-lg font-bold text-white">HTML:</h2>
                  <button
                    onClick={() => copyToClipboard(generatedHTML)}
                    className="text-white bg-blue-600 hover:bg-blue-500 rounded px-2 py-1"
                  >
                    Copy
                  </button>
                </div>
                <pre
                  className="text-white whitespace-pre-wrap overflow-y-auto"
                  style={{
                    maxHeight: "100px",
                    height: "100px",
                    overflowY: "auto",
                  }} // Fixed height for HTML
                >
                  {generatedHTML}
                </pre>
              </div>

              {/* CSS Section */}
              <div className="bg-gray-800 p-4 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <h2 className="text-lg font-bold text-white">CSS:</h2>
                  <button
                    onClick={() => copyToClipboard(generatedCSS)}
                    className="text-white bg-blue-600 hover:bg-blue-500 rounded px-2 py-1"
                  >
                    Copy
                  </button>
                </div>
                <pre
                  className="text-white whitespace-pre-wrap overflow-y-auto"
                  style={{
                    maxHeight: "100px",
                    height: "100px",
                    overflowY: "auto",
                  }} // Fixed height for CSS
                >
                  {generatedCSS}
                </pre>
              </div>

              {/* JavaScript Section */}
              <div className="bg-gray-800 p-4 rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <h2 className="text-lg font-bold text-white">JS:</h2>
                  <button
                    onClick={() => copyToClipboard(generatedJS)}
                    className="text-white bg-blue-600 hover:bg-blue-500 rounded px-2 py-1"
                  >
                    Copy
                  </button>
                </div>
                <pre
                  className="text-white whitespace-pre-wrap overflow-y-auto"
                  style={{
                    maxHeight: "100px",
                    height: "100px",
                    overflowY: "auto",
                  }} // Fixed height for JS
                >
                  {generatedJS}
                </pre>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Optional RetroGrid component at the bottom */}
      <RetroGrid />
    </div>
  );
};

export default Ui;
